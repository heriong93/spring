<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.emp.mapper.EmpMapper">
<sql id="condition"> <!-- 자주 쓰이는 구문이 있을 때 sql로 만들고 불러올 수 있음 -->
<where>
<if test="vo.departmentId != null and vo.departmentId != ''"> <!-- string일경우 null 로 체크 가능 int는 null 체크 안됨-->
department_id =#{vo.departmentId}
</if>
<if test="vo.firstName != null  and vo.firstName != ''">
AND first_name like '%' || #{vo.firstName} || '%'
</if>
<if test="vo.managerId != null and vo.managerId != ''">
AND manager_id = #{vo.managerId}
</if>
<if test="svo.employeeIds != null">
AND employee_id
<foreach collection="svo.employeeIds" 
		 item="empId" 
		 open="in(" 
		 close=")" 
		 separator="," > <!-- collection=for문 돌릴 배열 /open for문 돌기 전에 넣을 /for문 끝나고 close의 값으로 닫아줌. 동적 sql설명 여기 참조  https://mybatis.org/mybatis-3/ko/dynamic-sql.html -->
#{empId}
</foreach> 
</if>
</where>
</sql>
<resultMap type="EmpVO" id="empResultMap">
	<id property="employeeId" column="EMPLOYEE_ID" ></id>
	<result property="firstName" column="FIRST_NAME" />
	<result property="phone" column="PHONE_NUMBER" />
</resultMap>

<select id="getCount" resultType="long">
		select count(*)
		from employees
		<include refid="condition"></include> <!-- 조건 위에 sql로 따로 빼줌 -->
	</select>
	
<select id="getEmpList" resultMap="empResultMap">
select *  from ( select rownum as rn, a.* from (

	SELECT     	EMPLOYEE_ID
				,FIRST_NAME
				,LAST_NAME
				,EMAIL
				,PHONE_NUMBER AS "phone"
				,HIRE_DATE
				,JOB_ID
				,SALARY
				,COMMISSION_PCT
				,MANAGER_ID
				,DEPARTMENT_ID
	FROM employees e
<include refid="condition"></include> <!-- 조건 위에 sql로 따로 빼줌 -->
ORDER BY first_name

<![CDATA[
) a where rownum <=#{svo.end} ) b where rn >= #{svo.start}
]]>
</select>

<select id="getEmpInfo" parameterType="int" resultType="EmpVO"> <!-- 단건조회 -->
	select *
	from employees
	where employee_id = #{employeeId}	
</select>

<insert id="insertEmp" parameterType="EmpVO"> <!-- 사원 등록 --><!-- 실행할 수 있도록 empmapper.java에 설정해줘야함 -->
	<selectKey keyProperty="employeeId" order="BEFORE" resultType="int"> <!-- EmpVO의 이름이 keyProperty resultType이 employeeId의 datatype -->
		select employees_seq.nextval from dual
	</selectKey>
	insert into employees
		(	EMPLOYEE_ID
			,FIRST_NAME
			,LAST_NAME
			,EMAIL
			,HIRE_DATE
			,JOB_ID
			<if test="salary !=null">,SALARY</if>
			,MANAGER_ID
			,DEPARTMENT_ID)
	values
		( 	
		   #{employeeId}
		   ,#{firstName}
		   ,#{lastName}
		   ,#{email}
		   ,#{hireDate}
		   ,#{jobId}
		   <if test="salary !=null">,#{salary}</if>
		   ,#{managerId}
		   ,#{departmentId}
		)
</insert>

<delete id="deleteEmp" parameterType="Integer">
	DELETE FROM employees
	where employee_id = #{employeeId}
</delete>
<select id="getStat" resultType="map"> <!-- 부서별 사원 목록 출력 -->
		select e.department_id
				,department_name "name"
				,count (*) cnt 
		from employees e 
		JOIN departments d ON e.department_id = d.department_id
		where e.department_id is not null
		group by e.department_id
				,d.department_name
</select>
</mapper>
